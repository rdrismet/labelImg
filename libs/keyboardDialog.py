# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'keyboardShortcuts.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from pathlib import Path

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, Qt
from PyQt5.QtGui import QKeySequence
from PyQt5.QtWidgets import QDialog, QLineEdit, QPushButton, QVBoxLayout, QMainWindow, QWidget, QLabel, QMessageBox
from libs.config.configManager import ConfigManager

MOD_MASK = (Qt.CTRL | Qt.ALT | Qt.SHIFT | Qt.META)


class KeyboardDialog(QDialog):
    def __init__(self, parent=None):
        super(KeyboardDialog, self).__init__(parent)

        self.configManager = ConfigManager()
        self.shortcutsList = self.configManager.modifiableKeyboardShortcutsList

        self.verticalLayout = QtWidgets.QFormLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")
        for shortcut in self.shortcutsList:
            self.label = QtWidgets.QLabel(self)
            self.label.setObjectName(str("label" + shortcut["name"]))
            self.label.setText(shortcut["label"])
            self.verticalLayout.addWidget(self.label)
            self.lineEdit = MyLineEdit()
            self.lineEdit.setObjectName(shortcut["name"])
            self.lineEdit.setText(shortcut["value"])
            self.lineEdit.keyPressed.connect(self.updateLineEditSave)
            self.verticalLayout.addWidget(self.lineEdit)

        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.setWindowTitle("Keyboard Shortcuts")
        self.pushButton.setText("Save")

        self.pushButton.clicked.connect(self.updateShortcuts)

    def updateLineEditSave(self, text):
        lineedit = QtGui.QGuiApplication.focusObject()
        for i in self.findChildren(QtWidgets.QLineEdit):
            if i.objectName() == lineedit.objectName():
                i.setText(text)

    def updateShortcuts(self):
        try:
            for i in self.findChildren(QtWidgets.QLineEdit):
                self.configManager.setKeyboardShortcut(i.objectName(), i.text())
            QMessageBox.information(self, "Success", "Saved!")
        except:
            QMessageBox.warning(self, "Error", "ERROR")


class MyLineEdit(QLineEdit):
    keyPressed = pyqtSignal(str)

    def keyPressEvent(self, event):
        keyname = ''
        key = event.key()
        modifiers = int(event.modifiers())
        # if (modifiers and modifiers & MOD_MASK == modifiers and
        #         key > 0 and key != Qt.Key_Shift and key != Qt.Key_Alt and
        #         key != Qt.Key_Control and key != Qt.Key_Meta):
        #     keyname = QKeySequence(modifiers + key).toString()
        keyname = QKeySequence(modifiers + key).toString()
        self.keyPressed.emit(keyname)


def main():
    cm = KeyboardDialog()


if __name__ == '__main__':
    main()
